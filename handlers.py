"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
"""

import json
import random
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import CallbackQuery

from calculations import (
    calculate_life_path_number, 
    calculate_soul_number, 
    calculate_daily_number,
    validate_date
)
from keyboards import (
    get_main_menu_keyboard,
    get_result_keyboard,
    get_compatibility_result_keyboard,
    get_profile_keyboard,
    get_about_keyboard,
    get_premium_info_keyboard,
    get_feedback_keyboard,
    get_back_to_main_keyboard,
    get_yes_no_keyboard
)
from storage import user_storage


class UserStates(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è FSM
    """
    waiting_for_birth_date = State()
    waiting_for_first_date = State()
    waiting_for_second_date = State()
    waiting_for_feedback = State()


# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è —á–∏—Å–µ–ª
with open("numbers.json", "r", encoding="utf-8") as f:
    number_texts = json.load(f)

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º storage


def get_text(number: int, context: str, user_id: int) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —á–∏—Å–ª–∞ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    """
    if str(number) not in number_texts:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    
    options = number_texts[str(number)][context]
    shown = user_storage.get_text_history(user_id)
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏
    unused = [t for t in options if t not in shown]
    
    # –ï—Å–ª–∏ –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã, –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    if not unused:
        unused = options
        user_storage.update_user(user_id, text_history=[])
        shown = []
    
    # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if len(unused) == 1:
        chosen = unused[0]
    else:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
        chosen = random.choice(unused)
    
    user_storage.add_text_to_history(user_id, chosen)
    return chosen


async def start_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    user_id = message.from_user.id
    user_data = user_storage.get_user(user_id)
    
    welcome_text = (
        "üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –±–æ—Ç!\n\n"
        "–≠—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —á–∏—Å–µ–ª –∏ —ç–Ω–µ—Ä–≥–∏–π.\n\n"
        "‚ú® –ë–ï–°–ü–õ–ê–¢–ù–û:\n"
        "‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –≤–∞—à–µ –ß–∏—Å–ª–æ –°—É–¥—å–±—ã\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º\n\n"
        "üöÄ PREMIUM (–°–ö–û–†–û):\n"
        "‚Ä¢ –ü–æ–ª–Ω—ã–µ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏\n"
        "‚Ä¢ –ß–∏—Å–ª–æ –¥–Ω—è –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω –∏ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
    )
    
    await message.answer(welcome_text, reply_markup=get_main_menu_keyboard())


async def calculate_number_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ß–∏—Å–ª–æ –°—É–¥—å–±—ã"
    """
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.05.1990)",
        reply_markup=get_back_to_main_keyboard()
    )
    await UserStates.waiting_for_birth_date.set()


async def handle_birth_date(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    """
    user_id = message.from_user.id
    birth_date = message.text.strip()
    
    if not validate_date(birth_date):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
    user_storage.set_birth_date(user_id, birth_date)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —á–∏—Å–ª–æ —Å—É–¥—å–±—ã
    life_path = calculate_life_path_number(birth_date)
    text = get_text(life_path, "life_path", user_id)
    
    result_text = (
        f"üîÆ –í–ê–®–ï –ß–ò–°–õ–û –°–£–î–¨–ë–´: {life_path}\n\n"
        f"{text}"
    )
    
    await message.answer(result_text, reply_markup=get_result_keyboard())
    await state.finish()


async def compatibility_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "üíë –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"
    """
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):",
        reply_markup=get_back_to_main_keyboard()
    )
    await UserStates.waiting_for_first_date.set()


async def handle_first_date(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–µ—Ä–≤–æ–π –¥–∞—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    """
    first_date = message.text.strip()
    
    if not validate_date(first_date):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—É—é –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(first_date=first_date)
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):",
        reply_markup=get_back_to_main_keyboard()
    )
    await UserStates.waiting_for_second_date.set()


async def handle_second_date(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ç–æ—Ä–æ–π –¥–∞—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    """
    second_date = message.text.strip()
    
    if not validate_date(second_date):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –¥–∞—Ç—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    first_date = data.get("first_date")
    
    # –í—ã—á–∏—Å–ª—è–µ–º —á–∏—Å–ª–∞ —Å—É–¥—å–±—ã
    first_number = calculate_life_path_number(first_date)
    second_number = calculate_life_path_number(second_date)
    
    # –ü—Ä–æ—Å—Ç–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    compatibility_score = abs(first_number - second_number)
    if compatibility_score == 0:
        score = 9
        description = "–ò–¥–µ–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å! –í—ã –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–µ–ª—è–º."
    elif compatibility_score <= 2:
        score = 7
        description = "–•–æ—Ä–æ—à–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å. –í—ã –¥–æ–ø–æ–ª–Ω—è–µ—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∏ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è."
    elif compatibility_score <= 4:
        score = 5
        description = "–°—Ä–µ–¥–Ω—è—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å. –í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–æ–≤."
    else:
        score = 3
        description = "–ù–∏–∑–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å. –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–Ω–æ–≥–æ —É—Å–∏–ª–∏–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π."
    
    result_text = (
        f"üíë –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: {first_number} –∏ {second_number}\n\n"
        f"–û—Ü–µ–Ω–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {score}/9\n\n"
        f"{description}"
    )
    
    await message.answer(result_text, reply_markup=get_compatibility_result_keyboard())
    await state.finish()


async def profile_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "üìä –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å"
    """
    user_id = message.from_user.id
    user_data = user_storage.get_user(user_id)
    
    birth_date = user_data.get("birth_date", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
    life_path_number = user_data.get("life_path_number", "–Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ")
    
    profile_text = (
        f"üìä –í–ê–® –ü–†–û–§–ò–õ–¨:\n\n"
        f"üÜî –í–∞—à ID: {user_id}\n"
        f"üî¢ –í–∞—à–µ –ß–∏—Å–ª–æ –°—É–¥—å–±—ã: {life_path_number}\n"
        f"üíé –°—Ç–∞—Ç—É—Å: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"
    )
    
    has_calculated = birth_date != "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    await message.answer(profile_text, reply_markup=get_profile_keyboard(has_calculated))


async def about_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "‚ÑπÔ∏è –û –±–æ—Ç–µ"
    """
    about_text = (
        "–≠—Ç–æ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –±–æ—Ç ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —á–∏—Å–µ–ª!\n\n"
        "‚ú® –ë–ï–°–ü–õ–ê–¢–ù–û:\n"
        "‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –≤–∞—à–µ –ß–∏—Å–ª–æ –°—É–¥—å–±—ã\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º\n\n"
        "üöÄ PREMIUM (–°–ö–û–†–û):\n"
        "‚Ä¢ –ü–æ–ª–Ω—ã–µ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏\n"
        "‚Ä¢ –ß–∏—Å–ª–æ –¥–Ω—è –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω –∏ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
    )
    
    await message.answer(about_text, reply_markup=get_about_keyboard())


async def menu_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
    """
    await message.answer(
        "üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu_keyboard()
    )


async def premium_info_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /premium_info
    """
    premium_text = (
        "üíé PREMIUM –ü–û–î–ü–ò–°–ö–ê\n\n"
        "üöÄ –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ Premium:\n"
        "‚Ä¢ –ü–æ–ª–Ω—ã–µ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —á–∏—Å–µ–ª\n"
        "‚Ä¢ –ß–∏—Å–ª–æ –¥–Ω—è –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω –∏ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 299‚ÇΩ/–º–µ—Å—è—Ü\n\n"
        "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!"
    )
    
    await message.answer(premium_text, reply_markup=get_premium_info_keyboard())


async def feedback_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /feedback
    """
    feedback_text = (
        "üìù –û–¢–ó–´–í–´ –ò –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø\n\n"
        "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å!\n"
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –æ –±–æ—Ç–µ:"
    )
    
    await message.answer(feedback_text, reply_markup=get_feedback_keyboard())


async def handle_callback_query(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    await callback_query.answer()
    
    if callback_query.data == "back_main":
        await callback_query.message.edit_text(
            "üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_menu_keyboard()
        )
    elif callback_query.data == "back_about":
        await callback_query.message.edit_text(
            "–≠—Ç–æ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –±–æ—Ç ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —á–∏—Å–µ–ª!\n\n"
            "‚ú® –ë–ï–°–ü–õ–ê–¢–ù–û:\n"
            "‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –≤–∞—à–µ –ß–∏—Å–ª–æ –°—É–¥—å–±—ã\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º\n\n"
            "üöÄ PREMIUM (–°–ö–û–†–û):\n"
            "‚Ä¢ –ü–æ–ª–Ω—ã–µ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏\n"
            "‚Ä¢ –ß–∏—Å–ª–æ –¥–Ω—è –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω –∏ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
            reply_markup=get_about_keyboard()
        )
    elif callback_query.data == "premium_full":
        await callback_query.message.edit_text(
            "üîí –ü–û–õ–ù–ê–Ø –†–ê–°–®–ò–§–†–û–í–ö–ê (PREMIUM)\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Premium –ø–æ–¥–ø–∏—Å–∫–µ.\n\n"
            "–í –ø–æ–ª–Ω–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —á–∏—Å–ª–∞ —Å—É–¥—å–±—ã\n"
            "‚Ä¢ –ö–∞—Ä–º–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏ —É—Ä–æ–∫–∏\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—å–Ω—ã—Ö –∏ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω\n\n"
            "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!",
            reply_markup=get_back_to_main_keyboard()
        )
    elif callback_query.data == "premium_compatibility":
        await callback_query.message.edit_text(
            "üîí –î–ï–¢–ê–õ–¨–ù–´–ô –†–ê–ó–ë–û–† –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò (PREMIUM)\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Premium –ø–æ–¥–ø–∏—Å–∫–µ.\n\n"
            "–í –¥–µ—Ç–∞–ª—å–Ω–æ–º —Ä–∞–∑–±–æ—Ä–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ –≤—Å–µ–º –∞—Å–ø–µ–∫—Ç–∞–º\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –æ—Ç–Ω–æ—à–µ–Ω–∏–π\n"
            "‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –∏—Ö —Ä–µ—à–µ–Ω–∏—è\n"
            "‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞\n\n"
            "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!",
            reply_markup=get_back_to_main_keyboard()
        )
    elif callback_query.data == "calculate_number":
        await callback_query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.05.1990)",
            reply_markup=get_back_to_main_keyboard()
        )
        await UserStates.waiting_for_birth_date.set()
    elif callback_query.data == "recalculate":
        await callback_query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.05.1990)",
            reply_markup=get_back_to_main_keyboard()
        )
        await UserStates.waiting_for_birth_date.set()
    elif callback_query.data == "premium_info":
        await callback_query.message.edit_text(
            "üíé PREMIUM –ü–û–î–ü–ò–°–ö–ê\n\n"
            "üöÄ –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ Premium:\n"
            "‚Ä¢ –ü–æ–ª–Ω—ã–µ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —á–∏—Å–µ–ª\n"
            "‚Ä¢ –ß–∏—Å–ª–æ –¥–Ω—è –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω –∏ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 299‚ÇΩ/–º–µ—Å—è—Ü\n\n"
            "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!",
            reply_markup=get_premium_info_keyboard()
        )
    elif callback_query.data == "premium_features":
        await callback_query.message.edit_text(
            "üìã –ß–¢–û –í–•–û–î–ò–¢ –í PREMIUM:\n\n"
            "üîÆ –ü–æ–ª–Ω—ã–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:\n"
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–∏—Å–ª–∞ —Å—É–¥—å–±—ã\n"
            "‚Ä¢ –ö–∞—Ä–º–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏ —É—Ä–æ–∫–∏\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é\n\n"
            "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã:\n"
            "‚Ä¢ –ß–∏—Å–ª–æ –¥–Ω—è –∏ –µ–≥–æ –≤–ª–∏—è–Ω–∏–µ\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
            "üíï –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:\n"
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–π\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n"
            "‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã\n\n"
            "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!",
            reply_markup=get_back_to_main_keyboard()
        )
    elif callback_query.data == "subscribe":
        await callback_query.message.edit_text(
            "üíé –û–§–û–†–ú–õ–ï–ù–ò–ï PREMIUM –ü–û–î–ü–ò–°–ö–ò\n\n"
            "–ü–æ–¥–ø–∏—Å–∫–∞ Premium: 299‚ÇΩ/–º–µ—Å—è—Ü\n\n"
            "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admin\n\n"
            "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!",
            reply_markup=get_back_to_main_keyboard()
        )
    elif callback_query.data == "feedback":
        await callback_query.message.edit_text(
            "üìù –û–¢–ó–´–í–´ –ò –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø\n\n"
            "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å!\n"
            "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –æ –±–æ—Ç–µ:",
            reply_markup=get_feedback_keyboard()
        )
    elif callback_query.data == "leave_feedback":
        await callback_query.message.edit_text(
            "‚≠ê –û–°–¢–ê–í–ò–¢–¨ –û–¢–ó–´–í\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ:",
            reply_markup=get_back_to_main_keyboard()
        )
        await UserStates.waiting_for_feedback.set()
    elif callback_query.data == "suggestion":
        await callback_query.message.edit_text(
            "üí¨ –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞:",
            reply_markup=get_back_to_main_keyboard()
        )
        await UserStates.waiting_for_feedback.set()
    elif callback_query.data == "report_bug":
        await callback_query.message.edit_text(
            "üêõ –°–û–û–ë–©–ò–¢–¨ –û–ë –û–®–ò–ë–ö–ï\n\n"
            "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å:",
            reply_markup=get_back_to_main_keyboard()
        )
        await UserStates.waiting_for_feedback.set()


async def handle_feedback(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ—Ç–∑—ã–≤–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    """
    feedback_text = message.text.strip()
    user_id = message.from_user.id
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
    
    await message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!\n\n"
        "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
        reply_markup=get_back_to_main_keyboard()
    )
    
    await state.finish()


async def help_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    help_text = (
        "‚ùì –ü–û–ú–û–©–¨\n\n"
        "üîÆ –ß–∏—Å–ª–æ —Å—É–¥—å–±—ã ‚Äî –≤–∞—à –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä\n"
        "üíë –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ‚Äî –≥–∞—Ä–º–æ–Ω–∏—è –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö\n"
        "üìä –ü—Ä–æ—Ñ–∏–ª—å ‚Äî –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "‚ÑπÔ∏è –û –±–æ—Ç–µ ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –æ—Ç–∑—ã–≤—ã\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
    )
    
    await message.answer(help_text)


async def unknown_message(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    await message.answer(
        "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
    )