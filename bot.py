"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞
"""

import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor

from config import API_TOKEN
from handlers import (
    start_command,
    handle_birth_date,
    calculate_number_command,
    compatibility_command,
    handle_first_date,
    handle_second_date,
    profile_command,
    about_command,
    menu_command,
    premium_info_command,
    feedback_command,
    handle_feedback,
    handle_callback_query,
    help_command,
    unknown_message,
    UserStates
)
from scheduler import get_scheduler


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


def register_handlers():
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    """
    # –ö–æ–º–∞–Ω–¥—ã
    dp.register_message_handler(start_command, commands=['start'])
    dp.register_message_handler(menu_command, commands=['menu'])
    dp.register_message_handler(premium_info_command, commands=['premium_info'])
    dp.register_message_handler(feedback_command, commands=['feedback'])
    dp.register_message_handler(help_command, commands=['help'])
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.register_message_handler(handle_birth_date, state=UserStates.waiting_for_birth_date)
    dp.register_message_handler(handle_first_date, state=UserStates.waiting_for_first_date)
    dp.register_message_handler(handle_second_date, state=UserStates.waiting_for_second_date)
    dp.register_message_handler(handle_feedback, state=UserStates.waiting_for_feedback)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
    dp.register_message_handler(calculate_number_command, text="üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ß–∏—Å–ª–æ –°—É–¥—å–±—ã")
    dp.register_message_handler(compatibility_command, text="üíë –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
    dp.register_message_handler(profile_command, text="üìä –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å")
    dp.register_message_handler(about_command, text="‚ÑπÔ∏è –û –±–æ—Ç–µ")
    
    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.register_callback_query_handler(handle_callback_query)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.register_message_handler(unknown_message)


# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º NotificationScheduler


async def on_startup(dp):
    """
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    """
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_scheduler = get_scheduler(bot)
    asyncio.create_task(notification_scheduler.start())
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
    from storage import user_storage
    user_storage.cleanup_old_data(30)


async def on_shutdown(dp):
    """
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞
    """
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_scheduler = get_scheduler(bot)
    notification_scheduler.stop()


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    register_handlers()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(
        dp,
        skip_updates=True,
        on_startup=on_startup,
        on_shutdown=on_shutdown
    )


if __name__ == '__main__':
    main()