"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞
"""

import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command

from settings import config
from handlers import (
    start_command,
    handle_birth_date,
    calculate_number_command,
    compatibility_command,
    handle_first_date,
    handle_second_date,
    profile_command,
    about_command,
    menu_command,
    premium_info_command,
    feedback_command,
    handle_feedback,
    handle_diary_observation,
    handle_callback_query,
    help_command,
    unknown_message,
    UserStates
)
from scheduler import get_scheduler


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


def register_handlers():
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    """
    # –ö–æ–º–∞–Ω–¥—ã
    dp.message.register(start_command, Command('start'))
    dp.message.register(menu_command, Command('menu'))
    dp.message.register(premium_info_command, Command('premium_info'))
    dp.message.register(feedback_command, Command('feedback'))
    dp.message.register(help_command, Command('help'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.message.register(handle_birth_date, UserStates.waiting_for_birth_date)
    dp.message.register(handle_first_date, UserStates.waiting_for_first_date)
    dp.message.register(handle_second_date, UserStates.waiting_for_second_date)
    dp.message.register(handle_feedback, UserStates.waiting_for_feedback)
    dp.message.register(handle_diary_observation, UserStates.waiting_for_diary_observation)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
    dp.message.register(calculate_number_command, lambda m: m.text == "üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ß–∏—Å–ª–æ –°—É–¥—å–±—ã")
    dp.message.register(compatibility_command, lambda m: m.text == "üíë –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
    dp.message.register(profile_command, lambda m: m.text == "üìä –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å")
    dp.message.register(about_command, lambda m: m.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
    
    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.callback_query.register(handle_callback_query)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.message.register(unknown_message)


# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º NotificationScheduler


async def on_startup(dp):
    """
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    """
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        bot_instance = Bot(token=config.BOT_TOKEN)
        notification_scheduler = get_scheduler(bot_instance)
        asyncio.create_task(notification_scheduler.start())
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
        from storage import user_storage
        cleaned_count = user_storage.cleanup_old_data(30)
        logger.info(f"–û—á–∏—â–µ–Ω–æ {cleaned_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


async def on_shutdown(dp):
    """
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞
    """
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        bot_instance = Bot(token=config.BOT_TOKEN)
        notification_scheduler = get_scheduler(bot_instance)
        notification_scheduler.stop()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    try:
        register_handlers()
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot_instance = Bot(token=config.BOT_TOKEN)
        
        async def main_async():
            await on_startup(dp)
            try:
                await dp.start_polling(bot_instance, skip_updates=True)
            finally:
                await on_shutdown(dp)
        
        asyncio.run(main_async())
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise


if __name__ == '__main__':
    main()