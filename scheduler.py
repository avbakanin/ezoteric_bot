"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import asyncio
import datetime
import logging
from typing import List, Dict, Any, Optional

from aiogram import Bot
from aiogram.exceptions import TelegramAPIError
from calculations import calculate_daily_number
from storage import user_storage

logger = logging.getLogger(__name__)


class NotificationScheduler:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    """
    
    def __init__(self, bot: Bot, target_hour: int = 9):
        self.bot = bot
        self.is_running = False
        self.target_hour = target_hour  # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.last_sent_date = None
        self.max_retries = 3
        self.retry_delay = 5  # —Å–µ–∫—É–Ω–¥—ã
    
    async def start(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self.is_running = True
        logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω (–≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {self.target_hour}:00)")
        
        while self.is_running:
            try:
                await self._check_and_send_notifications()
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                await asyncio.sleep(300)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç
    
    def stop(self):
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self.is_running = False
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _check_and_send_notifications(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        now = datetime.datetime.now()
        today = now.date()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (now.hour == self.target_hour and 
            now.minute == 0 and 
            self.last_sent_date != today):
            
            await self._send_daily_notifications()
            self.last_sent_date = today
            
            # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
            await asyncio.sleep(60)
    
    async def _send_daily_notifications(self):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        """
        users = user_storage.get_users_with_notifications()
        
        if not users:
            logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º —á–∏—Å–ª–æ –¥–Ω—è –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö
        daily_number = calculate_daily_number()
        
        success_count = 0
        error_count = 0
        
        for user in users:
            try:
                await self._send_notification_to_user(user, daily_number)
                success_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(0.1)
                
            except Exception as e:
                error_count += 1
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {success_count} —É—Å–ø–µ—à–Ω–æ, {error_count} –æ—à–∏–±–æ–∫")
    
    async def _send_notification_to_user(self, user: Dict[str, Any], daily_number: int):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        user_id = user["user_id"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if not user_storage.can_send_daily_notification(user_id):
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —Å–µ–≥–æ–¥–Ω—è")
            return
        
        text_history = user.get("text_history", [])
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —á–∏—Å–ª–∞ –¥–Ω—è
        text = self._get_daily_text(daily_number, text_history)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n\n"
            f"üìÖ –ß–∏—Å–ª–æ –¥–Ω—è: {daily_number}\n\n"
            f"{text}\n\n"
            f"–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ‚ú®"
        )
        
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        for attempt in range(self.max_retries):
            try:
                await self.bot.send_message(user_id, message_text)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ—Ç–º–µ—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                user_storage.add_text_to_history(user_id, text)
                user_storage.mark_daily_notification_sent(user_id)
                
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                return
                
            except TelegramAPIError as e:
                if e.error_code == 403:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                    user_storage.update_user(user_id, notifications={"enabled": False})
                    return
                elif e.error_code == 400:  # –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                    logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    return
                else:
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                    if attempt < self.max_retries - 1:
                        await asyncio.sleep(self.retry_delay)
                    else:
                        raise
                        
            except Exception as e:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                if attempt < self.max_retries - 1:
                    await asyncio.sleep(self.retry_delay)
                else:
                    raise
    
    def _get_daily_text(self, daily_number: int, text_history: List[str]) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —á–∏—Å–ª–∞ –¥–Ω—è —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è —á–∏—Å–µ–ª
            import json
            with open("numbers.json", "r", encoding="utf-8") as f:
                number_texts = json.load(f)
            
            if str(daily_number) not in number_texts:
                logger.warning(f"–ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —á–∏—Å–ª–∞ –¥–Ω—è {daily_number}")
                return "–°–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω—ã–π –¥–µ–Ω—å! –î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏."
            
            if "daily" not in number_texts[str(daily_number)]:
                logger.warning(f"–ù–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ 'daily' –¥–ª—è —á–∏—Å–ª–∞ {daily_number}")
                return "–°–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω—ã–π –¥–µ–Ω—å! –î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏."
            
            options = number_texts[str(daily_number)]["daily"]
            
            if not options:
                logger.warning(f"–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —á–∏—Å–ª–∞ –¥–Ω—è {daily_number}")
                return "–°–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω—ã–π –¥–µ–Ω—å! –î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏."
            
            # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏
            unused = [t for t in options if t not in text_history]
            
            # –ï—Å–ª–∏ –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã, –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            if not unused:
                unused = options
            
            import random
            return random.choice(unused)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —á–∏—Å–ª–∞ –¥–Ω—è {daily_number}: {e}")
            return "–°–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω—ã–π –¥–µ–Ω—å! –î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏."
    
    async def send_test_notification(self, user_id: int):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        try:
            daily_number = calculate_daily_number()
            user_data = user_storage.get_user(user_id)
            text_history = user_data.get("text_history", [])
            
            text = self._get_daily_text(daily_number, text_history)
            
            message_text = (
                f"üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n"
                f"üìÖ –ß–∏—Å–ª–æ –¥–Ω—è: {daily_number}\n\n"
                f"{text}\n\n"
                f"–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
            )
            
            await self.bot.send_message(user_id, message_text)
            user_storage.add_text_to_history(user_id, text)
            # –ù–µ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def set_notification_time(self, hour: int):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        if 0 <= hour <= 23:
            self.target_hour = hour
            logger.info(f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {hour}:00")
        else:
            raise ValueError("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 23")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = None


def get_scheduler(bot: Bot) -> NotificationScheduler:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    """
    global scheduler
    if scheduler is None:
        scheduler = NotificationScheduler(bot)
    return scheduler
